---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: My dev Portal Cognito Stack

Parameters:
  CognitoIdentityPoolName:
    Type: String
    Description: The name for your Cognito Identity Pool.
    Default: 'DevPortalIdentityPool'

  CognitoDomainNameOrPrefix:
    Type: String
    Description: The Domain Name (or Prefix) at which your Cognito Hosted UI is located. This should be regionally unique.

  AccountRegistrationMode:
    Type: String
    Description: Methods allowed for account registration. In 'open' mode, any user may register for an account. In 'request' mode, any user may request an account, but an Admin must approve the request in order for the account to perform any privileged actions (like subscribing to an API). In 'invite' mode, users cannot register or request an account; instead, an Admin must send an invite for the user to accept. See the documentation for details.
    Default: 'open'
    AllowedValues:
      - 'open'
      - 'request'
      - 'invite'
  DevPortalPreLoginAccountsTableName:
    Type: String
    Description: The name of the DynamoDB PreLoginAccounts table.
    Default: 'DevPortalPreLoginAccounts'
  DevPortalCustomersTableName:
    Type: String
    Description: The name of the DynamoDB Customers table.
    Default: 'DevPortalCustomers'
  DevPortalSiteS3BucketHostname:
    Type: String
  DevelopmentMode:
    Type: String
    Description: Enabling this weakens security features (OAI, SSL, site S3 bucket with public read ACLs, Cognito callback verification, CORS, etc.) for easier development. It also breaks frontend routing (except to /index.html), including deep linking and page refresh. Do not enable this in production! Additionally, do not update a stack that was previously in development mode to be a production stack; instead, make a new stack that has never been in development mode.
    Default: 'false'
    AllowedValues: 
      - 'false'
      - 'true'
    ConstraintDescription: Malformed input - Parameter DevelopmentMode value must be either 'true' or 'false'

Conditions:
  InviteAccountRegistrationMode: !Equals [!Ref AccountRegistrationMode, 'invite']
  DevelopmentMode: !Equals [!Ref DevelopmentMode, 'true']


Resources:

  PreLoginAccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DevPortalPreLoginAccountsTableName
      AttributeDefinitions:
      - AttributeName: UserId
        AttributeType: S
      KeySchema:
      - AttributeName: UserId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5


  CognitoPreSignupTriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  CognitoPostConfirmationTriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt PreLoginAccountsTable.Arn
          - Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
            Resource: !GetAtt CognitoUserPool.Arn

  CognitoPostAuthenticationTriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:PutItem
            Resource: !GetAtt CustomersTable.Arn
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource: !GetAtt PreLoginAccountsTable.Arn
          - Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
            Resource: !GetAtt CognitoUserPool.Arn

  LambdaCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: 'Common code used by lambdas'
      ContentUri: ../../lambdas/common-layer/
      CompatibleRuntimes:
        - nodejs12.x

  CognitoPreSignupTriggerFn:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: !Sub '${AWS::StackName}-CognitoPreSignupTriggerFn'
        CodeUri: ../../lambdas/cognito-pre-signup-trigger
        Handler: index.handler
        MemorySize: 128
        Role: !GetAtt CognitoPreSignupTriggerExecutionRole.Arn
        Runtime: nodejs10.x
        Timeout: 3
        Environment:
          Variables:
            AccountRegistrationMode: !Ref AccountRegistrationMode
        Layers:
          - !Ref LambdaCommonLayer
  
  CognitoPostConfirmationTriggerFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CognitoPostConfirmationTriggerFn'
      CodeUri: ../../lambdas/cognito-post-confirmation-trigger
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoPostConfirmationTriggerExecutionRole.Arn
      Runtime: nodejs10.x
      Timeout: 3
      Environment:
        Variables:
          AccountRegistrationMode: !Ref AccountRegistrationMode
          PreLoginAccountsTableName: !Ref DevPortalPreLoginAccountsTableName
          RegisteredGroupName: !Sub '${AWS::StackName}-RegisteredGroup'
      Layers:
        - !Ref LambdaCommonLayer

  CognitoPostAuthenticationTriggerFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CognitoPostAuthenticationTriggerFn'
      CodeUri: ../../lambdas/cognito-post-authentication-trigger
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoPostAuthenticationTriggerExecutionRole.Arn
      Runtime: nodejs10.x
      Timeout: 3
      Environment:
        Variables:
          CustomersTableName: !Ref DevPortalCustomersTableName
          PreLoginAccountsTableName: !Ref DevPortalPreLoginAccountsTableName
          RegisteredGroupName: !Sub '${AWS::StackName}-RegisteredGroup'
      Layers:
        - !Ref LambdaCommonLayer
    
  CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Ref CognitoIdentityPoolName
        # Lambda trigger caveats:
        #
        # - We can't use the functions' ARNs here, because there would be a
        #   circular dependency: some functions reference either the UserPool or
        #   UserPoolGroups within it.
        #
        # - You must declare an AWS::Lambda::Permission for each lambda here, or
        #   else calls from Cognito will fail with an AccessDeniedException. See
        #   `CognitoPreSignupTriggerFnExecutionPermission` as an example. More
        #   reading: <https://stackoverflow.com/a/42460847> and
        #   <https://forums.aws.amazon.com/thread.jspa?messageID=748566#748566>
        LambdaConfig:
          PreSignUp: !Join
            - ''
            - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'
              - !Sub '${AWS::StackName}-CognitoPreSignupTriggerFn'
          PostConfirmation: !Join
            - ''
            - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'
              - !Sub '${AWS::StackName}-CognitoPostConfirmationTriggerFn'
          PostAuthentication: !Join
            - ''
            - - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:'
              - !Sub '${AWS::StackName}-CognitoPostAuthenticationTriggerFn'
        Policies:
          PasswordPolicy:
            MinimumLength: 12
            RequireLowercase: true
            RequireNumbers: true
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: !If [
            InviteAccountRegistrationMode, 'true', 'false',
          ]
          InviteMessageTemplate:
            EmailSubject: 'Developer Portal - Invitation'
            EmailMessage: !Join [ '', [
              '<h2>Developer Portal</h2><p>You have been invited to access the developer portal at <a href="',
              !If [ 'DevelopmentMode',
                !Join [ '', [ 'https://', !Ref DevPortalSiteS3BucketHostname, '/index.html' ]],
                ''
              ],
              '">',
              !If [ 'DevelopmentMode',
                !Join [ '', [ 'https://', !Ref DevPortalSiteS3BucketHostname, '/index.html' ]],
                ''
              ],
              '</a>.</p><p><b>Username:</b> {username}<br><b>Temporary password:</b> {####}</p>'
            ] ]
        AutoVerifiedAttributes: ['email']
        UsernameAttributes: ['email']
        EmailVerificationSubject: 'Developer Portal - Verification Code'
        EmailVerificationMessage: '<h2>Developer Portal</h2><p>Your verification code is <b>{####}</b></p>'
  

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    # It's really unintuitive, but changing any of the properties here will cause stack updates to deploy non-functionally.
    # The CognitoUserPoolClientSettings custom resource runs after this resource and adds a bunch of fields.
    # However, when this is updated and changes, the CUPCS custom resource doesn't re-run, and so a bunch of vital
    # settings won't be set, e.g., CallbackURL.
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CognitoIdentityPool
      GenerateSecret: false
      RefreshTokenValidity: 30

  CognitoUserPoolClientSettingsBackingFnRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'

  CognitoUserPoolClientSettingsBackingFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 300
      CodeUri: ../../lambdas/cfn-cognito-user-pools-client-settings
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolClientSettingsBackingFnRole.Arn
      Layers:
        - !Ref LambdaCommonLayer

  CognitoUserPoolClientSettings:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Timeout: 360
      ServiceToken: !GetAtt CognitoUserPoolClientSettingsBackingFn.Arn
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoUserPoolClient
      SupportedIdentityProviders: [ "COGNITO" ] # should (eventually) allow people to add values
      CallbackURL: !If [ LocalDevelopmentMode,
        'http://localhost:3000/index.html?action=login',
          !Join [ '', [ 'https://', !Ref DevPortalSiteS3BucketHostname, '/index.html?action=login' ]]
      ]
      LogoutURL: !If [ LocalDevelopmentMode,
        'http://localhost:3000/index.html?action=logout',
          !Join [ '', [ 'https://', !Ref DevPortalSiteS3BucketHostname, '/index.html?action=logout' ]]
      ]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [ "implicit" ]
      AllowedOAuthScopes: [ "openid" ]

  CognitoUserPoolDomainBackingFnRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: ManageUserPoolDomain
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'

  CognitoUserPoolDomainBackingFn:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 300
      CodeUri: ../../lambdas/cfn-cognito-user-pools-domain
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolDomainBackingFnRole.Arn
      Layers:
        - !Ref LambdaCommonLayer

  CognitoUserPoolDomain:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Timeout: 360
      ServiceToken: !GetAtt CognitoUserPoolDomainBackingFn.Arn
      UserPoolId: !Ref CognitoUserPool
      Domain: !Ref CognitoDomainNameOrPrefix
        
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref CognitoIdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Join
            - ''
            - - cognito-idp.
              - !Ref 'AWS::Region'
              - .amazonaws.com/
              - !Ref CognitoUserPool

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
      
  # Every logged-in Cognito user is "authenticated".
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAuthenticatedRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
                - /prod/*/signin
      Path: '/'
      
  # A logged-in Cognito user, who is not in a "pending" (invite or request)
  # state, is "registered".
  CognitoRegisteredRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoRegisteredRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
                - /prod/*/*
          - Effect: Deny
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
                - /prod/*/admin/*
      Path: '/'
      
  CognitoAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAdminRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
                - /prod/*/*
      
  CognitoAdminsGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: 'Admin users of the developer portal'
      GroupName: !Join ['', [!Ref 'AWS::StackName', 'AdminsGroup']]
      # the role we assume is the role associated with the lowest-precedence users group
      # since admin group has a precedence of 0, it takes priority
      Precedence: 0
      RoleArn: !GetAtt CognitoAdminRole.Arn
      UserPoolId: !Ref CognitoUserPool

  CognitoRegisteredGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: 'Registered users in the developer portal'
      GroupName: !Sub '${AWS::StackName}-RegisteredGroup'
      Precedence: 1
      RoleArn: !GetAtt CognitoRegisteredRole.Arn
      UserPoolId: !Ref CognitoUserPool
 
  CognitoPreSignupTriggerFnExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPreSignupTriggerFn.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  CognitoPostConfirmationTriggerFnExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostConfirmationTriggerFn.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool

  CognitoPostAuthenticationTriggerFnExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CognitoPostAuthenticationTriggerFn.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:cognito-idp:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':userpool/'
          - !Ref CognitoUserPool
    
Outputs:
  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: DevPortalCognitoUserPoolArn

  CognitoIdentityPoolId:
    Value: !Ref CognitoIdentityPool
    Export:
      Name: DevPortalCognitoIdentityPoolId # !Ref CognitoIdentityPool
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Export:
      Name: DevPortalCognitoUserPoolId # !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: DevPortalCognitoUserPoolClientId # !Ref CognitoUserPoolClient
  CognitoUserPoolDomainFullUrl:
    Value: !GetAtt CognitoUserPoolDomain.FullUrl
    Export:
      Name: DevPortalCognitoUserPoolDomainFullUrl # !GetAtt CognitoUserPoolDomain.FullUrl
  CognitoAdminsGroupName:
    Value: !Ref CognitoAdminsGroup
    Export:
      Name: DevPortalCognitoAdminsGroupName # !Ref CognitoAdminsGroup